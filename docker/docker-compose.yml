version: '3'

services:

  zoo1:
    image: zookeeper:3.4.9
    hostname: zoo1
    ports:
      - "2181:2181"
    environment:
      ZOO_MY_ID: 1
      ZOO_PORT: 2181
      ZOO_SERVERS: server.1=zoo1:2888:3888
    volumes:
      - zookeeper:/var/lib/zookeeper/data

  kafka1:
    image: confluentinc/cp-kafka:5.3.0
    hostname: kafka1
    ports:
      - "9092:9092"
    restart: always
    environment:
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka1:19092,LISTENER_DOCKER_EXTERNAL://kafka1:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
    volumes:
      - kafka1:/var/lib/kafka1/data
    depends_on:
      - zoo1

  kafka2:
    image: confluentinc/cp-kafka:5.3.0
    hostname: kafka2
    ports:
      - "9093:9093"
    restart: always
    environment:
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka2:19093,LISTENER_DOCKER_EXTERNAL://kafka2:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
      KAFKA_BROKER_ID: 2
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
    volumes:
      - kafka2:/var/lib/kafka2/data
    depends_on:
      - zoo1

  kafka3:
    image: confluentinc/cp-kafka:5.3.0
    hostname: kafka3
    ports:
      - "9094:9094"
    restart: always
    environment:
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka3:19094,LISTENER_DOCKER_EXTERNAL://kafka3:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
      KAFKA_BROKER_ID: 3
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
    volumes:
      - kafka3:/var/lib/kafka3/data
    depends_on:
      - zoo1

  postgres:
    image: postgres
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: QueryDB
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
    volumes:
      - postgres:/var/lib/postgres/data

  solr1:
    image: solr
    hostname: solr1
    ports:
      - "8983:8983"
    environment:
      ZK_HOST: zoo1:2181
    entrypoint:
      - bash
      - "-c"
      - "exec solr -c -f"
    volumes:
      - solr1:/var/lib/solr/data

  solr2:
    image: solr
    hostname: solr2
    ports:
      - "8984:8984"
    environment:
      ZK_HOST: zoo1:2181
    entrypoint:
      - bash
      - "-c"
      - "exec solr -c -f"
    volumes:
      - solr2:/var/lib/solr2/data

  create-collection:
    build: .
    hostname: create-collection
    environment:
      WAIT_HOSTS: solr1:8983
      WAIT_HOSTS_TIMEOUT: 60


  mention-storer:
    build:
      context: ../mention-storer/
      dockerfile: dockerfile
    hostname: mention-storer
    restart: always
    environment:
      WAIT_HOSTS: solr:8983

  mentions-generator:
    build:
      context: ../mentions-generator/
      dockerfile: dockerfile
    hostname: mentions-generator
    restart: always
    environment:
      WAIT_HOSTS: postgres:5432

  twitter-puller:
    build:
      context: ../twitterpuller/
      dockerfile: dockerfile
    hostname: twitterpuller
    restart: always
    environment:
      WAIT_HOSTS: postgres:5432



volumes:
  kafka1:
  kafka2:
  kafka3:
  zookeeper:
  postgres:
  solr1:
  solr2:


