apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: kafka1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafka1
  template:
    metadata:
      labels:
        app: kafka1
    spec:
      containers:
      - env:
        - name: KAFKA_ADVERTISED_LISTENERS
          value: LISTENER_DOCKER_INTERNAL://kafka1:19092,LISTENER_DOCKER_EXTERNAL://kafka1-service:9092
        - name: KAFKA_BROKER_ID
          value: "1"
        - name: KAFKA_DELETE_TOPIC_ENABLE
          value: "true"
        - name: KAFKA_INTER_BROKER_LISTENER_NAME
          value: LISTENER_DOCKER_INTERNAL
        - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
          value: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
        - name: KAFKA_LOG4J_LOGGERS
          value: kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO
        - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
          value: "1"
        - name: KAFKA_ZOOKEEPER_CONNECT
          value: zoo1-service:2181
        image: confluentinc/cp-kafka:5.3.0
        name: kafka1
        ports:
        - containerPort: 9092
        volumeMounts:
          - name: kafka1-persistent-storage
            mountPath: /var/lib/kafka1
      hostname: kafka1
      restartPolicy: Always
      volumes:
        - name: kafka1-persistent-storage
          persistentVolumeClaim:
            claimName: kafka1-pv-claim
---
apiVersion: v1
kind: Service
metadata:
  name: kafka1-service
spec:
  selector:
    app: kafka1
  ports:
    - port: 9092
      targetPort: 9092
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: kafka1-pv-claim
  labels:
    app: kafka1
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: local-path
  resources:
    requests:
      storage: 10Gi
